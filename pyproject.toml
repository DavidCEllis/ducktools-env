[build-system]
requires = [
    "setuptools>=61.0",
]
build-backend = "setuptools.build_meta"

[project]
name="ducktools-envman"
description="New Ducktools Module"
authors = [
  { name="David C Ellis" },
]
readme="README.md"
requires-python = ">=3.10"
dependencies = [
    "prefab-classes",
    "ducktools-lazyimporter",
    "ducktools-scriptmetadata",
    "ducktools-pythonfinder",
    "tomli; python_version <= '3.10'",
    "packaging~=23.2",
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
    "Operating System :: OS Independent",
]
dynamic = ['version']

[project.optional-dependencies]
testing = ["pytest", "pytest-cov", "coverage-conditional-plugin"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
version = {attr = "ducktools.envman._version.__version__"}

[tool.pytest.ini_options]
addopts= "--cov=src/ --cov-report=term-missing"
testpaths = [
    "tests",
]

[tool.coverage.run]
plugins = ["coverage_conditional_plugin"]

[tool.coverage.coverage_conditional_plugin.rules]
# This tool works backwards - it really means no cover if <condition>
skip-if-os-win32 = "sys_platform == 'win32'"
skip-if-os-other = "sys_platform != 'win32'"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "env",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"